// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_PLATFORM_WEB_MOJO_URL_LOADER_CLIENT_OBSERVER_H_
#define THIRD_PARTY_BLINK_PUBLIC_PLATFORM_WEB_MOJO_URL_LOADER_CLIENT_OBSERVER_H_

#include <stdint.h>

#include <string>
#include <vector>

#include "mojo/public/cpp/base/big_buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "services/network/public/mojom/url_response_head.mojom-forward.h"
#include "third_party/blink/public/mojom/frame/back_forward_cache_controller.mojom-forward.h"
#include "third_party/blink/public/platform/web_common.h"

namespace net {
struct RedirectInfo;
}

namespace network {
struct URLLoaderCompletionStatus;
}

namespace blink {

// This is implemented by content::ResourceDispatcher to observe
// WebMojoURLLoaderClient that receives messages from a single URLLoader.
// This is a transient class used until WebURLLoaderImpl in content/ is moved to
// Blink.
// TODO(https://crbug.com/1110032): Remove this.
class BLINK_PLATFORM_EXPORT WebMojoURLLoaderClientObserver {
 public:
  // Called when the transfer size is updated.
  virtual void OnTransferSizeUpdated(int request_id,
                                     int32_t transfer_size_diff) = 0;

  // Called as upload progress is made.
  virtual void OnUploadProgress(int request_id,
                                int64_t position,
                                int64_t size) = 0;

  // Called when response headers are available.
  virtual void OnReceivedResponse(int request_id,
                                  network::mojom::URLResponseHeadPtr) = 0;

  // Called when metadata generated by the renderer is retrieved from the
  // cache.
  virtual void OnReceivedCachedMetadata(int request_id,
                                        mojo_base::BigBuffer data) = 0;

  // Called when a redirect occurs.
  virtual void OnReceivedRedirect(
      int request_id,
      const net::RedirectInfo& redirect_info,
      network::mojom::URLResponseHeadPtr response_head,
      scoped_refptr<base::SingleThreadTaskRunner> task_runner) = 0;

  // Called when the response body becomes available.
  virtual void OnStartLoadingResponseBody(
      int request_id,
      mojo::ScopedDataPipeConsumerHandle body) = 0;

  // Called when the response is complete.
  virtual void OnRequestComplete(
      int request_id,
      const network::URLLoaderCompletionStatus& status) = 0;

  virtual void EvictFromBackForwardCache(mojom::RendererEvictionReason reason,
                                         int request_id) = 0;

 protected:
  virtual ~WebMojoURLLoaderClientObserver() = default;
};

}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_PLATFORM_WEB_MOJO_URL_LOADER_CLIENT_OBSERVER_H_
